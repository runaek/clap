// Code generated by github.com/runaek/clap/cmd/generate_drivers. DO NOT EDIT

package derive 

import (
	"fmt"
	"github.com/runaek/clap"
	"github.com/runaek/clap/pkg/parse"
)

const (
	ErrInt clap.Error = "unable to derive 'int' Argument"
)

type intDeriver struct {}

func (_ intDeriver) DeriveKeyValue(a any, s string, opts ...clap.Option) (clap.IKeyValue, error) {
	v, ok := a.(*int)
	
	if !ok {
		return nil, fmt.Errorf("%w: want *int but got %T", ErrInt, v)
	}
	
	return clap.NewKeyValue[int](v, s, parse.Int{}, opts...), nil 
}

func (_ intDeriver) DerivePosition(a any, s int, opts ...clap.Option) (clap.IPositional, error) {
	v, ok := a.(*int)
	
	if !ok {
		return nil, fmt.Errorf("%w: want *int but got %T", ErrInt, v)
	}
	
	return clap.NewPosition[int](v, s, parse.Int{}, opts...), nil 
}

func (_ intDeriver) DeriveFlag(a any, s string, opts ...clap.Option) (clap.IFlag, error) {
	v, ok := a.(*int)
	
	if !ok {
		return nil, fmt.Errorf("%w: want *int but got %T", ErrInt, v)
	}
	
	return clap.NewFlag[int](v, s, parse.Int{}, opts...), nil 
}

func init() {
	clap.RegisterFlagDeriver("int", intDeriver{})
	clap.RegisterPositionalDeriver("int", intDeriver{})
	clap.RegisterKeyValueDeriver("int", intDeriver{})
}
