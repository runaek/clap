// Code generated by github.com/runaek/clap/cmd/generate_drivers. DO NOT EDIT

package derive

import (
	"fmt"
	"github.com/runaek/clap"
	"github.com/runaek/clap/pkg/parse"
)

const (
	ErrFloats clap.Error = "unable to derive 'floats' Argument"
)

type floatsDeriver struct{}

func (_ floatsDeriver) DeriveKeyValue(a any, s string, opts ...clap.Option) (clap.IKeyValue, error) {
	v, ok := a.(*[]float64)

	if !ok {
		return nil, fmt.Errorf("%w: want *[]float64 but got %T", ErrFloats, v)
	}

	return clap.NewKeyValues[float64](v, s, parse.Float64{}, opts...), nil
}

func (_ floatsDeriver) DerivePosition(a any, s int, opts ...clap.Option) (clap.IPositional, error) {
	v, ok := a.(*[]float64)

	if !ok {
		return nil, fmt.Errorf("%w: want *[]float64 but got %T", ErrFloats, v)
	}

	return clap.NewPositions[float64](v, s, parse.Float64{}, opts...), nil
}

func (_ floatsDeriver) DeriveFlag(a any, s string, opts ...clap.Option) (clap.IFlag, error) {
	v, ok := a.(*[]float64)

	if !ok {
		return nil, fmt.Errorf("%w: want *[]float64 but got %T", ErrFloats, v)
	}

	return clap.NewFlags[float64](v, s, parse.Float64{}, opts...), nil
}

func init() {
	clap.RegisterFlagDeriver("floats", floatsDeriver{})
	clap.RegisterPositionalDeriver("floats", floatsDeriver{})
	clap.RegisterKeyValueDeriver("floats", floatsDeriver{})
}
