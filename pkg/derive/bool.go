// Code generated by github.com/runaek/clap/cmd/generate_drivers. DO NOT EDIT

package derive 

import (
	"fmt"
	"github.com/runaek/clap"
	"github.com/runaek/clap/pkg/parse"
)

const (
	ErrBool clap.Error = "unable to derive 'bool' Argument"
)

type boolDeriver struct {}

func (_ boolDeriver) DeriveKeyValue(a any, s string, opts ...clap.Option) (clap.IKeyValue, error) {
	v, ok := a.(*bool)
	
	if !ok {
		return nil, fmt.Errorf("%w: want *bool but got %T", ErrBool, v)
	}

	return clap.NewKeyValue[bool](v, s, parse.Bool{}, opts...), nil
}

func (_ boolDeriver) DerivePosition(a any, s int, opts ...clap.Option) (clap.IPositional, error) {
	v, ok := a.(*bool)

	if !ok {
		return nil, fmt.Errorf("%w: want *bool but got %T", ErrBool, v)
	}

	return clap.NewPosition[bool](v, s, parse.Bool{}, opts...), nil
}

func (_ boolDeriver) DeriveFlag(a any, s string, opts ...clap.Option) (clap.IFlag, error) {
	v, ok := a.(*bool)

	if !ok {
		return nil, fmt.Errorf("%w: want *bool but got %T", ErrBool, v)
	}

	return clap.NewFlag[bool](v, s, parse.Bool{}, opts...), nil
}

func init() {
	clap.RegisterFlagDeriver("bool", boolDeriver{})
	clap.RegisterPositionalDeriver("bool", boolDeriver{})
	clap.RegisterKeyValueDeriver("bool", boolDeriver{})
}
